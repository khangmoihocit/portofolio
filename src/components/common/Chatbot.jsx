import React, { useState, useEffect, useRef } from 'react';
import {
    FaPaperPlane,
    FaSync,
    FaTimes,
    FaExpand,
    FaCompress,
    FaExclamationTriangle,
    FaChartLine
} from 'react-icons/fa';
import '../../styles/components/_chatbot.scss';
import { FaRobot } from 'react-icons/fa';
import {
    getGeminiResponse,
    checkGeminiApiKey
} from '../../services/geminiService';
import { useLoadBalancerMonitor } from '../../hooks/useLoadBalancerMonitor';

const initialMessages = [
    {
        id: 1,
        sender: 'bot',
        text: 'Ch√†o b·∫°n! T√¥i l√† tr·ª£ l√Ω ·∫£o c·ªßa Khang. B·∫°n c√≥ th·ªÉ h·ªèi t√¥i v·ªÅ k·ªπ nƒÉng, d·ª± √°n, kinh nghi·ªám, ho·∫∑c c√°ch li√™n h·ªá v·ªõi anh ·∫•y! üòä'
    }
];

const Chatbot = ({ handleClose, onFullScreenChange }) => {
    const [messages, setMessages] = useState(() => {
        try {
            const savedMessages = sessionStorage.getItem('chatHistory');
            return savedMessages ? JSON.parse(savedMessages) : initialMessages;
        } catch (error) {
            console.error('Kh√¥ng th·ªÉ ƒë·ªçc l·ªãch s·ª≠ chat t·ª´ sessionStorage', error);
            return initialMessages;
        }
    });
    const [inputValue, setInputValue] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [hasApiKey, setHasApiKey] = useState(false);
    const [currentDate, setCurrentDate] = useState('');
    const [isFullScreen, setIsFullScreen] = useState(false);
    const [showPerformancePanel, setShowPerformancePanel] = useState(false);
    const [requestStartTime, setRequestStartTime] = useState(null);
    const [lastResponseTime, setLastResponseTime] = useState(null);
    const messagesEndRef = useRef(null);
    const inputRef = useRef(null);
    const { metrics, healthScore, trends, recommendations, isHealthy } = useLoadBalancerMonitor();

    const scrollToBottom = () => {
        messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
    };

    const handleSendMessage = async () => {
        if (inputValue.trim() === '' || isLoading) return;

        const currentInput = inputValue;
        const userMessage = { id: Date.now(), sender: 'user', text: currentInput };
        setMessages(prev => [...prev, userMessage]);
        setInputValue('');
        setIsLoading(true);
        setRequestStartTime(Date.now());

        try {
            const botResponseText = await getGeminiResponse(currentInput, messages);
            const responseTime = Date.now() - requestStartTime;
            setLastResponseTime(responseTime);

            const botMessage = {
                id: Date.now() + 1,
                sender: 'bot',
                text: botResponseText || 'Xin l·ªói, t√¥i kh√¥ng th·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y l√∫c n√†y. B·∫°n c√≥ th·ªÉ th·ª≠ h·ªèi v·ªÅ k·ªπ nƒÉng, d·ª± √°n, ho·∫∑c kinh nghi·ªám c·ªßa Khang kh√¥ng? üòÖ',
                responseTime
            };
            setMessages(prev => [...prev, botMessage]);
        } catch (error) {
            console.error('L·ªói sau nhi·ªÅu l·∫ßn th·ª≠ l·∫°i:', error);
            const finalErrorMessage = {
                id: Date.now() + 1,
                sender: 'bot',
                text: 'R·∫•t ti·∫øc, ƒë√£ c√≥ l·ªói x·∫£y ra v√† kh√¥ng th·ªÉ x·ª≠ l√Ω y√™u c·∫ßu c·ªßa b·∫°n l√∫c n√†y. Tin nh·∫Øn c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c kh√¥i ph·ª•c, b·∫°n c√≥ th·ªÉ th·ª≠ g·ª≠i l·∫°i. üôè',
                isError: true
            };
            setMessages(prev => [...prev, finalErrorMessage]);
            setInputValue(currentInput); // Kh√¥i ph·ª•c l·∫°i tin nh·∫Øn c·ªßa ng∆∞·ªùi d√πng
        } finally {
            setIsLoading(false);
            setRequestStartTime(null);
            setTimeout(() => inputRef.current?.focus(), 100);
        }
    };

    const handleRefresh = () => {
        setMessages(initialMessages);
        setInputValue('');
        setIsLoading(false);
        sessionStorage.removeItem('chatHistory');
        setTimeout(() => inputRef.current?.focus(), 100);
    };

    const handleKeyPress = e => {
        if (e.key === 'Enter' && !e.shiftKey) {
            e.preventDefault();
            handleSendMessage();
        }
    };

    const toggleFullScreen = () => {
        const newFullScreenState = !isFullScreen;
        setIsFullScreen(newFullScreenState);
        if (onFullScreenChange) {
            onFullScreenChange(newFullScreenState);
        }
        setTimeout(() => inputRef.current?.focus(), 300);
    };

    useEffect(() => {
        try {
            if (messages.length > initialMessages.length) {
                sessionStorage.setItem('chatHistory', JSON.stringify(messages));
            }
        } catch (error) {
            console.error('Kh√¥ng th·ªÉ l∆∞u l·ªãch s·ª≠ chat v√†o sessionStorage', error);
        }
    }, [messages]);

    useEffect(() => {
        setHasApiKey(checkGeminiApiKey());
        const today = new Date();
        const options = { year: 'numeric', month: 'long', day: 'numeric' };
        setCurrentDate(today.toLocaleDateString('en-US', options));
        setTimeout(() => inputRef.current?.focus(), 500);
    }, []);

    useEffect(() => {
        scrollToBottom();
    }, [messages]);

    return (
        <div className={`chatbot-widget ${isFullScreen ? 'chatbot-widget__fullscreen' : ''}`}>
            <header className='chatbot-header'>
                <div className='chatbot-header__info'>
                    <span className='chatbot-header__icon'><FaRobot /></span>
                    <div>
                        <h3 className='chatbot-header__title'>KhangMoiHocIT Bot</h3>
                        <p className='chatbot-header__status'>
                            {isHealthy ? (
                                <>
                                    <span className='status-indicator healthy'>‚óè</span>
                                    {metrics.healthyKeys}/{metrics.totalKeys} keys ‚Ä¢ {metrics.systemLoad} load
                                </>
                            ) : (
                                <>
                                    <FaExclamationTriangle className='status-indicator warning' />
                                    System degraded
                                </>
                            )}
                            {lastResponseTime && <span className='response-time'>‚Ä¢ {lastResponseTime}ms</span>}
                        </p>
                    </div>
                </div>
                <div className='chatbot-header__actions'>
                    <button onClick={() => setShowPerformancePanel(prev => !prev)} aria-label='Toggle performance panel' className={showPerformancePanel ? 'active' : ''} title={`Health Score: ${healthScore}%`}>
                        <FaChartLine />
                    </button>
                    <button onClick={handleRefresh} aria-label='Refresh conversation'><FaSync /></button>
                    <button onClick={toggleFullScreen} aria-label={isFullScreen ? 'Exit fullscreen' : 'Enter fullscreen'}>
                        {isFullScreen ? <FaCompress /> : <FaExpand />}
                    </button>
                    <button onClick={handleClose} aria-label='Close widget'><FaTimes /></button>
                </div>
            </header>

            {showPerformancePanel && (
                <div className='performance-panel'>
                    <div className='performance-header'>
                        <h4>Performance Dashboard</h4>
                        <div className='health-score'>
                            <span className='score-value'>{healthScore}</span>
                            <span className='score-label'>Health Score</span>
                        </div>
                    </div>
                    <div className='performance-metrics'>
                        <div className='metric'>
                            <span className='metric-label'>Response Time</span>
                            <span
                                className={`metric-value ${
                                    trends.responseTime === 'UP'
                                        ? 'trend-up'
                                        : trends.responseTime === 'DOWN'
                                        ? 'trend-down'
                                        : ''
                                }`}
                            >
                                {metrics.averageResponseTime.toFixed(0)}ms
                            </span>
                        </div>

                        <div className='metric'>
                            <span className='metric-label'>Success Rate</span>
                            <span
                                className={`metric-value ${
                                    metrics.successRate >= 95
                                        ? 'good'
                                        : 'warning'
                                }`}
                            >
                                {metrics.successRate.toFixed(1)}%
                            </span>
                        </div>

                        <div className='metric'>
                            <span className='metric-label'>Queue</span>
                            <span
                                className={`metric-value ${
                                    metrics.queueSize > 10 ? 'warning' : ''
                                }`}
                            >
                                {metrics.queueSize}
                            </span>
                        </div>

                        <div className='metric'>
                            <span className='metric-label'>Active</span>
                            <span className='metric-value'>
                                {metrics.activeRequests}
                            </span>
                        </div>
                    </div>
                    {recommendations.length > 0 && (
                        <div className='performance-alerts'>
                            {recommendations.slice(0, 2).map((rec, index) => (
                                <div key={index} className={`alert alert-${rec.type.toLowerCase()}`}>{rec.message}</div>
                            ))}
                        </div>
                    )}
                </div>
            )}

            <main className='chatbot-messages'>
                <p className='chatbot-messages__date'>{currentDate}</p>
                {messages.map(msg => (
                    <div key={msg.id} className={`message-bubble message-bubble--${msg.sender}`}>
                        <div className='message-content' dangerouslySetInnerHTML={{ __html: msg.text.replace(/\n/g, '<br/>').replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>').replace(/\*(.*?)\*/g, '<em>$1</em>') }} />
                    </div>
                ))}
                {isLoading && (
                    <div className='message-bubble message-bubble--bot is-typing'>
                        <span></span><span></span><span></span>
                    </div>
                )}
                <div ref={messagesEndRef} />
            </main>

            <footer className='chatbot-input'>
                <input
                    ref={inputRef}
                    type='text'
                    placeholder={hasApiKey ? (isLoading ? 'ƒêang x·ª≠ l√Ω...' : 'H·ªèi v·ªÅ k·ªπ nƒÉng, d·ª± √°n c·ªßa Khang...') : 'Enter message'}
                    value={inputValue}
                    onChange={e => setInputValue(e.target.value)}
                    onKeyPress={handleKeyPress}
                    disabled={isLoading}
                    autoFocus
                    autoComplete="off"
                />
                <button onClick={handleSendMessage} aria-label='Send message' disabled={isLoading || inputValue.trim() === ''} className={isLoading ? 'loading' : ''}>
                    <FaPaperPlane />
                </button>
            </footer>
        </div>
    );
};

export default Chatbot;