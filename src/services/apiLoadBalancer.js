import { GoogleGenerativeAI } from '@google/generative-ai';

/**
 * Advanced API Load Balancer v·ªõi Circuit Breaker Pattern
 * T·ªëi ∆∞u cho multi-user concurrent requests
 */
class ApiLoadBalancer {
    constructor() {
        // API Keys configuration
        this.apiKeys = [
            import.meta.env.VITE_GEMINI_API_KEY_1 || '',
            import.meta.env.VITE_GEMINI_API_KEY || '',
            import.meta.env.VITE_GEMINI_API_KEY_2 || '',
            import.meta.env.VITE_GEMINI_API_KEY_3 || '',
            import.meta.env.VITE_GEMINI_API_KEY_4 || '',
            import.meta.env.VITE_GEMINI_API_KEY_5 || ''
        ].filter(key => key !== '');

        // Circuit breaker states cho t·ª´ng key
        this.keyStates = this.apiKeys.map((_, index) => ({
            state: 'CLOSED', // CLOSED, OPEN, HALF_OPEN
            failureCount: 0,
            lastFailure: null,
            nextAttempt: null,
            requestCount: 0,
            successCount: 0,
            avgResponseTime: 0,
            isHealthy: true
        }));

        // Load balancing configuration
        this.currentKeyIndex = 0;
        this.requestQueue = [];
        this.activeRequests = new Map(); // Theo d√µi requests ƒëang ch·∫°y
        this.maxConcurrentPerKey = 3; // T·ªëi ƒëa 3 requests ƒë·ªìng th·ªùi/key
        this.maxQueueSize = 50; // T·ªëi ƒëa 50 requests trong queue

        // Circuit breaker configuration
        this.failureThreshold = 3; // S·ªë l·ªói li√™n ti·∫øp ƒë·ªÉ m·ªü circuit
        this.recoveryTimeout = 60000; // 1 ph√∫t ƒë·ªÉ th·ª≠ l·∫°i
        this.healthCheckInterval = 30000; // Health check m·ªói 30s

        // Performance monitoring
        this.metrics = {
            totalRequests: 0,
            successfulRequests: 0,
            failedRequests: 0,
            averageResponseTime: 0,
            keyUsageStats: new Map()
        };

        // Start health check timer
        this.startHealthCheck();

        // Cleanup old metrics periodically
        setInterval(() => this.cleanupMetrics(), 300000); // 5 ph√∫t
    }

    /**
     * T√¨m API key t·ªëi ∆∞u nh·∫•t ƒë·ªÉ s·ª≠ d·ª•ng
     * @returns {number} Index c·ªßa key t·ªëi ∆∞u
     */
    selectOptimalKey() {
        const healthyKeys = this.keyStates
            .map((state, index) => ({ ...state, index }))
            .filter(key => 
                key.state === 'CLOSED' && 
                key.isHealthy &&
                this.getActiveRequestsForKey(key.index) < this.maxConcurrentPerKey
            );

        if (healthyKeys.length === 0) {
            // N·∫øu kh√¥ng c√≥ key kh·ªèe m·∫°nh, th·ª≠ t√¨m key HALF_OPEN
            const halfOpenKeys = this.keyStates
                .map((state, index) => ({ ...state, index }))
                .filter(key => key.state === 'HALF_OPEN');

            if (halfOpenKeys.length > 0) {
                return halfOpenKeys[0].index;
            }

            // Fallback: t√¨m key c√≥ √≠t active requests nh·∫•t
            const availableKeys = this.keyStates
                .map((state, index) => ({
                    index,
                    activeRequests: this.getActiveRequestsForKey(index)
                }))
                .filter(key => key.activeRequests < this.maxConcurrentPerKey)
                .sort((a, b) => a.activeRequests - b.activeRequests);

            return availableKeys.length > 0 ? availableKeys[0].index : 0;
        }

        // Weighted round robin d·ª±a tr√™n performance
        const keyScores = healthyKeys.map(key => ({
            ...key,
            score: this.calculateKeyScore(key)
        }));

        // Sort theo score (cao nh·∫•t tr∆∞·ªõc)
        keyScores.sort((a, b) => b.score - a.score);
        
        return keyScores[0].index;
    }

    /**
     * T√≠nh ƒëi·ªÉm cho key d·ª±a tr√™n performance metrics
     * @param {Object} keyState - Tr·∫°ng th√°i c·ªßa key
     * @returns {number} ƒêi·ªÉm s·ªë (c√†ng cao c√†ng t·ªët)
     */
    calculateKeyScore(keyState) {
        const successRate = keyState.requestCount > 0 ? 
            (keyState.successCount / keyState.requestCount) : 1;
        const responseTimeScore = keyState.avgResponseTime > 0 ? 
            (1000 / keyState.avgResponseTime) : 1; // ∆Øu ti√™n response time th·∫•p
        const loadScore = 1 / (this.getActiveRequestsForKey(keyState.index) + 1);

        return (successRate * 0.5) + (responseTimeScore * 0.3) + (loadScore * 0.2);
    }

    /**
     * ƒê·∫øm s·ªë active requests cho m·ªôt key
     * @param {number} keyIndex - Index c·ªßa key
     * @returns {number} S·ªë requests ƒëang active
     */
    getActiveRequestsForKey(keyIndex) {
        return Array.from(this.activeRequests.values())
            .filter(req => req.keyIndex === keyIndex).length;
    }

    /**
     * X·ª≠ l√Ω request v·ªõi load balancing v√† circuit breaker
     * @param {string} userMessage - Message t·ª´ user
     * @param {Array} conversationHistory - L·ªãch s·ª≠ chat
     * @param {string} requestId - Unique request ID
     * @returns {Promise<string>} Response t·ª´ AI
     */
    async processRequest(userMessage, conversationHistory = [], requestId = null) {
        if (!requestId) {
            requestId = this.generateRequestId();
        }

        // Ki·ªÉm tra queue size
        if (this.requestQueue.length >= this.maxQueueSize) {
            throw new Error('H·ªá th·ªëng ƒëang qu√° t·∫£i. Vui l√≤ng th·ª≠ l·∫°i sau √≠t ph√∫t.');
        }

        return new Promise((resolve, reject) => {
            const request = {
                id: requestId,
                userMessage,
                conversationHistory,
                resolve,
                reject,
                timestamp: Date.now(),
                attempts: 0,
                maxAttempts: 3
            };

            this.requestQueue.push(request);
            this.processQueue();
        });
    }

    /**
     * X·ª≠ l√Ω queue requests
     */
    async processQueue() {
        while (this.requestQueue.length > 0 && this.activeRequests.size < this.maxConcurrentPerKey * this.apiKeys.length) {
            const request = this.requestQueue.shift();
            if (!request) continue;

            const keyIndex = this.selectOptimalKey();
            const keyState = this.keyStates[keyIndex];

            // Circuit breaker check
            if (keyState.state === 'OPEN') {
                if (Date.now() < keyState.nextAttempt) {
                    // Re-queue n·∫øu circuit v·∫´n ƒëang m·ªü
                    this.requestQueue.unshift(request);
                    break;
                } else {
                    // Chuy·ªÉn sang HALF_OPEN ƒë·ªÉ test
                    keyState.state = 'HALF_OPEN';
                    console.log(`üîÑ Circuit breaker cho key ${keyIndex + 1} chuy·ªÉn sang HALF_OPEN`);
                }
            }

            this.executeRequest(request, keyIndex);
        }
    }

    /**
     * Th·ª±c thi request v·ªõi key ƒë√£ ch·ªçn
     * @param {Object} request - Request object
     * @param {number} keyIndex - Index c·ªßa key s·ª≠ d·ª•ng
     */
    async executeRequest(request, keyIndex) {
        const startTime = Date.now();
        request.keyIndex = keyIndex;

        // Add to active requests
        this.activeRequests.set(request.id, request);

        try {
            const response = await this.callGeminiApi(
                request.userMessage, 
                request.conversationHistory, 
                keyIndex
            );

            const responseTime = Date.now() - startTime;
            this.recordSuccess(keyIndex, responseTime);
            
            console.log(`‚úÖ Request ${request.id} ho√†n th√†nh v·ªõi key ${keyIndex + 1} (${responseTime}ms)`);
            request.resolve(response);

        } catch (error) {
            const responseTime = Date.now() - startTime;
            this.recordFailure(keyIndex, error, responseTime);

            // Retry logic
            request.attempts++;
            if (request.attempts < request.maxAttempts) {
                console.log(`üîÑ Retry request ${request.id} (${request.attempts}/${request.maxAttempts})`);
                
                // Re-queue with delay
                setTimeout(() => {
                    this.requestQueue.unshift(request);
                    this.processQueue();
                }, 1000 * request.attempts);
            } else {
                console.error(`‚ùå Request ${request.id} th·∫•t b·∫°i sau ${request.maxAttempts} l·∫ßn th·ª≠`);
                request.reject(error);
            }

        } finally {
            // Remove from active requests
            this.activeRequests.delete(request.id);
            
            // Continue processing queue
            setTimeout(() => this.processQueue(), 100);
        }
    }

    /**
     * G·ªçi Gemini API v·ªõi key c·ª• th·ªÉ
     * @param {string} userMessage - Message t·ª´ user
     * @param {Array} conversationHistory - L·ªãch s·ª≠ chat
     * @param {number} keyIndex - Index c·ªßa key
     * @returns {Promise<string>} Response t·ª´ AI
     */
    async callGeminiApi(userMessage, conversationHistory, keyIndex) {
        const apiKey = this.apiKeys[keyIndex];
        const genAI = new GoogleGenerativeAI(apiKey);
        
        const model = genAI.getGenerativeModel({
            model: 'gemini-2.5-flash',
            systemInstruction: this.createSystemPrompt(),
        });

        // Process conversation history
        const firstUserMessageIndex = conversationHistory.findIndex(msg => msg.sender === 'user');
        const validHistorySlice = firstUserMessageIndex === -1 
            ? [] 
            : conversationHistory.slice(firstUserMessageIndex);

        const history = validHistorySlice.map(msg => ({
            role: msg.sender === 'user' ? 'user' : 'model',
            parts: [{ text: msg.text }],
        }));

        const chat = model.startChat({ 
            history,
            generationConfig: {
                maxOutputTokens: 1000,
                temperature: 0.7,
            }
        });

        const result = await chat.sendMessage(userMessage);
        const response = await result.response;
        
        return response.text();
    }

    /**
     * Ghi nh·∫≠n th√†nh c√¥ng
     * @param {number} keyIndex - Index c·ªßa key
     * @param {number} responseTime - Th·ªùi gian response
     */
    recordSuccess(keyIndex, responseTime) {
        const keyState = this.keyStates[keyIndex];
        
        keyState.requestCount++;
        keyState.successCount++;
        keyState.failureCount = 0; // Reset failure count
        
        // Update average response time
        keyState.avgResponseTime = keyState.avgResponseTime === 0 ? 
            responseTime : 
            (keyState.avgResponseTime + responseTime) / 2;

        // Circuit breaker state management
        if (keyState.state === 'HALF_OPEN') {
            keyState.state = 'CLOSED';
            keyState.isHealthy = true;
            console.log(`‚úÖ Circuit breaker cho key ${keyIndex + 1} ƒë√£ CLOSED`);
        }

        // Update global metrics
        this.metrics.totalRequests++;
        this.metrics.successfulRequests++;
        this.updateAverageResponseTime(responseTime);
        this.updateKeyUsageStats(keyIndex);
    }

    /**
     * Ghi nh·∫≠n l·ªói
     * @param {number} keyIndex - Index c·ªßa key
     * @param {Error} error - Error object
     * @param {number} responseTime - Th·ªùi gian response
     */
    recordFailure(keyIndex, error, responseTime) {
        const keyState = this.keyStates[keyIndex];
        
        keyState.requestCount++;
        keyState.failureCount++;
        keyState.lastFailure = error;

        const errorMessage = error.message?.toLowerCase() || '';
        
        // Ki·ªÉm tra lo·∫°i l·ªói ƒë·ªÉ quy·∫øt ƒë·ªãnh circuit breaker
        const isCriticalError = 
            errorMessage.includes('quota') || 
            errorMessage.includes('rate limit') || 
            errorMessage.includes('429') ||
            errorMessage.includes('invalid') ||
            errorMessage.includes('unauthorized');

        if (isCriticalError) {
            keyState.failureCount += 2; // TƒÉng n·∫∑ng h∆°n cho critical errors
        }

        // Circuit breaker logic
        if (keyState.failureCount >= this.failureThreshold) {
            keyState.state = 'OPEN';
            keyState.isHealthy = false;
            keyState.nextAttempt = Date.now() + this.recoveryTimeout;
            
            console.warn(`üö´ Circuit breaker cho key ${keyIndex + 1} ƒë√£ M·ªû (${keyState.failureCount} l·ªói)`);
        }

        // Update global metrics
        this.metrics.totalRequests++;
        this.metrics.failedRequests++;
        this.updateAverageResponseTime(responseTime);
    }

    /**
     * Health check ƒë·ªãnh k·ª≥
     */
    startHealthCheck() {
        setInterval(() => {
            this.keyStates.forEach((keyState, index) => {
                // Auto recovery cho keys ƒë√£ h·∫øt timeout
                if (keyState.state === 'OPEN' && Date.now() >= keyState.nextAttempt) {
                    keyState.state = 'HALF_OPEN';
                    keyState.failureCount = Math.max(0, keyState.failureCount - 1);
                    console.log(`üîÑ Key ${index + 1} s·∫µn s√†ng ƒë·ªÉ test l·∫°i (HALF_OPEN)`);
                }

                // Reset failure count cho keys ho·∫°t ƒë·ªông t·ªët
                if (keyState.state === 'CLOSED' && keyState.successCount > 10) {
                    keyState.failureCount = Math.max(0, keyState.failureCount - 1);
                }
            });
        }, this.healthCheckInterval);
    }

    /**
     * Generate unique request ID
     * @returns {string} Request ID
     */
    generateRequestId() {
        return `req_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;
    }

    /**
     * Update average response time
     * @param {number} responseTime - Response time
     */
    updateAverageResponseTime(responseTime) {
        if (this.metrics.averageResponseTime === 0) {
            this.metrics.averageResponseTime = responseTime;
        } else {
            this.metrics.averageResponseTime = 
                (this.metrics.averageResponseTime + responseTime) / 2;
        }
    }

    /**
     * Update key usage statistics
     * @param {number} keyIndex - Key index
     */
    updateKeyUsageStats(keyIndex) {
        const current = this.metrics.keyUsageStats.get(keyIndex) || 0;
        this.metrics.keyUsageStats.set(keyIndex, current + 1);
    }

    /**
     * Clean up old metrics
     */
    cleanupMetrics() {
        // Reset metrics m·ªói 5 ph√∫t ƒë·ªÉ tr√°nh memory leak
        this.keyStates.forEach(keyState => {
            if (keyState.requestCount > 1000) {
                keyState.requestCount = Math.floor(keyState.requestCount / 2);
                keyState.successCount = Math.floor(keyState.successCount / 2);
            }
        });
    }

    /**
     * Create system prompt (simplified)
     * @returns {string} System prompt
     */
    createSystemPrompt() {
        return `B·∫°n l√† tr·ª£ l√Ω AI c·ªßa Ph·∫°m VƒÉn Khang, m·ªôt Backend/Frontend Developer t√†i nƒÉng. H√£y tr·∫£ l·ªùi ng·∫Øn g·ªçn, th√¢n thi·ªán v√† chuy√™n nghi·ªáp.`;
    }

    /**
     * Get current status
     * @returns {Object} Current status
     */
    getStatus() {
        return {
            keys: this.keyStates.map((state, index) => ({
                index: index + 1,
                state: state.state,
                isHealthy: state.isHealthy,
                activeRequests: this.getActiveRequestsForKey(index),
                successRate: state.requestCount > 0 ? 
                    ((state.successCount / state.requestCount) * 100).toFixed(1) + '%' : '100%',
                avgResponseTime: state.avgResponseTime.toFixed(0) + 'ms'
            })),
            queue: {
                size: this.requestQueue.length,
                maxSize: this.maxQueueSize
            },
            activeRequests: this.activeRequests.size,
            metrics: {
                ...this.metrics,
                successRate: this.metrics.totalRequests > 0 ? 
                    ((this.metrics.successfulRequests / this.metrics.totalRequests) * 100).toFixed(1) + '%' : '100%'
            }
        };
    }

    /**
     * Manual reset cho failed keys
     */
    resetFailedKeys() {
        this.keyStates.forEach(keyState => {
            keyState.state = 'CLOSED';
            keyState.failureCount = 0;
            keyState.isHealthy = true;
            keyState.nextAttempt = null;
        });
        console.log('üîÑ ƒê√£ reset t·∫•t c·∫£ failed keys');
    }
}

// Singleton instance
export const loadBalancer = new ApiLoadBalancer();

// Export wrapper functions
export async function getGeminiResponse(userMessage, conversationHistory = []) {
    return loadBalancer.processRequest(userMessage, conversationHistory);
}

export function getApiKeyStatus() {
    const status = loadBalancer.getStatus();
    return {
        total: status.keys.length,
        available: status.keys.filter(k => k.isHealthy).length,
        failed: status.keys.filter(k => !k.isHealthy).length,
        currentIndex: 1, // Simplified
        failedKeyIndexes: status.keys
            .filter(k => !k.isHealthy)
            .map(k => k.index)
    };
}

export function checkGeminiApiKey() {
    return loadBalancer.apiKeys.length > 0;
}

export function resetFailedKeys() {
    loadBalancer.resetFailedKeys();
}