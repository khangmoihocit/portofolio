import { GoogleGenerativeAI } from '@google/generative-ai';

const API_KEY = import.meta.env.VITE_GEMINI_API_KEY || '';
const genAI = new GoogleGenerativeAI(API_KEY);

const PERSONAL_INFO = {
    name: 'Ph·∫°m VƒÉn Khang',
    nickname: 'Khang',
    age: 20,
    nationality: 'Vi·ªát Nam',
    languages: ['Ti·∫øng Vi·ªát', 'Ti·∫øng Anh'],
    address: 'M·ªπ ƒê·ª©c, H√† N·ªôi, Vi·ªát Nam',
    freelance: 'C√≥ s·∫µn',
    profession: 'Backend Developer / Frontend Developer',
    university: 'ƒê·∫°i h·ªçc M·ªü H√† N·ªôi',
    major: 'C√¥ng ngh·ªá th√¥ng tin',
    status: 'Sinh vi√™n nƒÉm cu·ªëi',
    skills: {
        backend: ['Spring Boot', 'Node.js', 'Java', 'Python', 'RESTful API', 'Microservices'],
        frontend: ['React.js', 'TypeScript', 'HTML/CSS', 'JavaScript', 'Responsive Design'],
        database: ['MySQL', 'PostgreSQL', 'MongoDB'],
        mobile: ['React Native', 'Flutter'],
        other: ['Git', 'Docker', 'AWS', 'UI/UX Design']
    },
    projects: [
        { name: 'E-Commerce Platform', description: 'Website th∆∞∆°ng m·∫°i ƒëi·ªán t·ª≠ ƒë·∫ßy ƒë·ªß t√≠nh nƒÉng v·ªõi gi·ªè h√†ng, thanh to√°n v√† x√°c th·ª±c ng∆∞·ªùi d√πng', tech: ['React.js', 'Spring Boot', 'MySQL'] },
        { name: 'Mini Mart System', description: 'H·ªá th·ªëng qu·∫£n l√Ω si√™u th·ªã v·ªõi frontend React v√† backend Spring Boot', tech: ['React.js', 'Spring Boot', 'PostgreSQL'] },
        { name: 'Portfolio Website', description: 'Website portfolio c√° nh√¢n v·ªõi theme s√°ng/t·ªëi, ƒëa ng√¥n ng·ªØ', tech: ['React.js', 'SCSS', 'i18next'] },
        { name: 'Bookstore Management', description: '·ª®ng d·ª•ng desktop qu·∫£n l√Ω hi·ªáu s√°ch', tech: ['C# .NET', 'WebForms'] }
    ],
    services: ['Ph√°t tri·ªÉn Web (Frontend & Backend)', 'Thi·∫øt k·∫ø UI/UX', 'Ph√°t tri·ªÉn ·ª©ng d·ª•ng di ƒë·ªông', 'T∆∞ v·∫•n c√¥ng ngh·ªá', 'Freelance projects'],
    contact: {
        email: 'khangphamvan.dev@gmail.com',
        phone: 'Li√™n h·ªá qua portfolio',
        linkedin: 'Xem tr√™n portfolio',
        github: 'github.com/khangmoihocit'
    }
};


/**
 * H√†m t·∫°o ch·ªâ th·ªã h·ªá th·ªëng (System Prompt) cho Gemini.
 * ƒê√¢y l√† ph·∫ßn quan tr·ªçng nh·∫•t, ƒë·ªãnh h√¨nh vai tr√≤ v√† c√°ch ho·∫°t ƒë·ªông c·ªßa AI.
 * @returns {string} Ch·ªâ th·ªã h·ªá th·ªëng.
 */
function createSystemPrompt() {
    // Chuy·ªÉn to√†n b·ªô th√¥ng tin c√° nh√¢n th√†nh m·ªôt chu·ªói JSON ƒë·ªÉ AI d·ªÖ ƒë·ªçc
    const personalInfoString = JSON.stringify(PERSONAL_INFO, null, 2);

    // Th√™m th√¥ng tin th·ªùi gian th·ª±c
    const now = new Date();
    const dateTimeString = now.toLocaleString('vi-VN', {
        weekday: 'long',
        year: 'numeric',
        month: 'long',
        day: 'numeric',
        hour: '2-digit',
        minute: '2-digit',
        timeZoneName: 'short'
    });

    return `
        B·∫°n l√† m·ªôt tr·ª£ l√Ω AI th√¥ng minh v·ªõi model l√† gemini-2.5-pro, th√¢n thi·ªán v√† chuy√™n nghi·ªáp, ƒë·∫°i di·ªán cho ch·ªß nh√¢n c·ªßa m√¨nh l√† Ph·∫°m VƒÉn Khang (c√≥ th·ªÉ g·ªçi l√† Khang).
        
        **TH√îNG TIN B·ªêI C·∫¢NH QUAN TR·ªåNG:**
            **Th·ªùi gian hi·ªán t·∫°i:** ${dateTimeString}. H√£y s·ª≠ d·ª•ng th√¥ng tin n√†y ƒë·ªÉ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan ƒë·∫øn th·ªùi gian.

        **VAI TR√í C·ª¶A B·∫†N:**
        1.  **Tr·ª£ l√Ω cho Khang:** Nhi·ªám v·ª• ch√≠nh c·ªßa b·∫°n l√† cung c·∫•p th√¥ng tin v·ªÅ k·ªπ nƒÉng, d·ª± √°n, h·ªçc v·∫•n v√† c√°c d·ªãch v·ª• m√† Khang cung c·∫•p.
        2.  **Tr·ª£ l√Ω ki·∫øn th·ª©c:** B·∫°n c≈©ng c√≥ kh·∫£ nƒÉng tr·∫£ l·ªùi c√°c c√¢u h·ªèi ki·∫øn th·ª©c chung, s√°ng t·∫°o n·ªôi dung, vi·∫øt code, ho·∫∑c b·∫•t c·ª© ƒëi·ªÅu g√¨ ng∆∞·ªùi d√πng y√™u c·∫ßu, gi·ªëng nh∆∞ m·ªôt tr·ª£ l√Ω AI to√†n nƒÉng.

        **D·ªÆ LI·ªÜU V·ªÄ KHANG (CONTEXT):**
        ƒê√¢y l√† to√†n b·ªô th√¥ng tin v·ªÅ Khang. H√£y s·ª≠ d·ª•ng n√≥ khi ng∆∞·ªùi d√πng h·ªèi v·ªÅ anh ·∫•y.
        \`\`\`json
        ${personalInfoString}
        \`\`\`

        **QUY T·∫ÆC PH·∫¢N H·ªíI:**
        -   **∆Øu ti√™n tr·∫£ l·ªùi v·ªÅ Khang:** N·∫øu c√¢u h·ªèi c·ªßa ng∆∞·ªùi d√πng c√≥ v·∫ª li√™n quan ƒë·∫øn Khang (v√≠ d·ª•: "b·∫°n l√†m d·ª± √°n n√†o?", "k·ªπ nƒÉng c·ªßa b·∫°n l√† g√¨?"), h√£y d·ª±a v√†o d·ªØ li·ªáu JSON ·ªü tr√™n ƒë·ªÉ tr·∫£ l·ªùi.
        -   **Tr·∫£ l·ªùi c√¢u h·ªèi chung:** N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn Khang (v√≠ d·ª•: "th·ªß ƒë√¥ c·ªßa Ph√°p l√† g√¨?", "vi·∫øt m·ªôt b√†i th∆° v·ªÅ m√πa thu", "c√°ch sort m·ªôt array trong javascript?"), h√£y tr·∫£ l·ªùi tr·ª±c ti·∫øp c√¢u h·ªèi ƒë√≥ m·ªôt c√°ch ch√≠nh x√°c v√† h·ªØu √≠ch. **KH√îNG** ƒë∆∞·ª£c chuy·ªÉn h∆∞·ªõng c√¢u h·ªèi v·ªÅ Khang m·ªôt c√°ch kh√¥ng c·∫ßn thi·∫øt.
        -   **Gi·ªØ v·ªØng vai tr√≤:** D√π tr·∫£ l·ªùi c√¢u h·ªèi g√¨, lu√¥n duy tr√¨ gi·ªçng vƒÉn l√† tr·ª£ l√Ω c·ªßa Khang. B·∫Øt ƒë·∫ßu c√¢u tr·∫£ l·ªùi m·ªôt c√°ch t·ª± nhi√™n.
        -   **Ng√¥n ng·ªØ:** Lu√¥n tr·∫£ l·ªùi b·∫±ng Ti·∫øng Vi·ªát.
        -   **Phong c√°ch:** Th√¢n thi·ªán, chuy√™n nghi·ªáp, s·ª≠ d·ª•ng emoji m·ªôt c√°ch h·ª£p l√Ω ƒë·ªÉ c√¢u tr·∫£ l·ªùi th√™m sinh ƒë·ªông.
        -   **Ng·∫Øn g·ªçn:** Gi·ªØ c√¢u tr·∫£ l·ªùi s√∫c t√≠ch, ƒëi th·∫≥ng v√†o v·∫•n ƒë·ªÅ.
    `;
}

/**
 * H√†m g·ªçi Gemini API ƒë√£ ƒë∆∞·ª£c t·ªëi ∆∞u h√≥a v√† s·ª≠a l·ªói.
 * @param {string} userMessage - Tin nh·∫Øn t·ª´ ng∆∞·ªùi d√πng.
 * @param {Array<Object>} conversationHistory - L·ªãch s·ª≠ cu·ªôc tr√≤ chuy·ªán.
 * @returns {Promise<string>} - C√¢u tr·∫£ l·ªùi t·ª´ AI.
 */
export async function getGeminiResponse(userMessage, conversationHistory = []) {
    try {
        const model = genAI.getGenerativeModel({
            model: 'gemini-2.5-flash',
            systemInstruction: createSystemPrompt(),
        });

        // 1. T√¨m v·ªã tr√≠ c·ªßa tin nh·∫Øn ƒë·∫ßu ti√™n do ng∆∞·ªùi d√πng g·ª≠i
        const firstUserMessageIndex = conversationHistory.findIndex(msg => msg.sender === 'user');

        // 2. T·∫°o m·ªôt l·ªãch s·ª≠ h·ª£p l·ªá:
        // - N·∫øu kh√¥ng t√¨m th·∫•y tin nh·∫Øn n√†o c·ªßa user (-1), t·ª©c l√† ƒë√¢y l√† tin nh·∫Øn ƒë·∫ßu ti√™n,
        //   th√¨ ta s·∫Ω b·∫Øt ƒë·∫ßu v·ªõi m·ªôt l·ªãch s·ª≠ tr·ªëng.
        // - N·∫øu c√≥, ta s·∫Ω c·∫Øt m·∫£ng l·ªãch s·ª≠ b·∫Øt ƒë·∫ßu t·ª´ tin nh·∫Øn ƒë√≥ ƒë·ªÉ ƒë·∫£m b·∫£o n√≥ lu√¥n b·∫Øt ƒë·∫ßu b·∫±ng 'user'.
        const validHistorySlice = firstUserMessageIndex === -1
            ? []
            : conversationHistory.slice(firstUserMessageIndex);

        // 3. √Ånh x·∫° l·∫°i l·ªãch s·ª≠ H·ª¢P L·ªÜ cho ph√π h·ª£p v·ªõi ƒë·ªãnh d·∫°ng c·ªßa Gemini API
        const history = validHistorySlice.map(msg => ({
            role: msg.sender === 'user' ? 'user' : 'model',
            parts: [{ text: msg.text }],
        }));

        const chat = model.startChat({ history });

        const result = await chat.sendMessage(userMessage);
        const response = await result.response;
        
        return response.text();

    } catch (error) {
        console.error('L·ªói khi g·ªçi Gemini API:', error);
        return '√îi, c√≥ v·∫ª ƒë√£ c√≥ l·ªói x·∫£y ra. B·∫°n vui l√≤ng th·ª≠ l·∫°i sau m·ªôt ch√∫t nh√©! üò•';
    }
}

export function checkGeminiApiKey() {
    return API_KEY && API_KEY !== 'your-gemini-api-key-here';
}

export { PERSONAL_INFO };